#include <stdio.h> 
#include <stdlib.h> 
int main() 
{ 
 int total_blocks, head_pos, requests[100], n, i, j, temp, head_moves = 0; 
 // Accepting user input 
 printf("Enter the total number of disk blocks: "); 
 scanf("%d", &total_blocks); 
 printf("Enter the disk request string (end with -1):\n"); 
 n = 0; 
 while (1) { 
 scanf("%d", &requests[n]); 
 if (requests[n] == -1) { 
 break; 
 } 
 n++; 
 } 
 printf("Enter the current head position: "); 
 scanf("%d", &head_pos); 
 printf("Enter the direction (L for Left, R for Right): "); 
 char dir; 
 scanf(" %c", &dir); 
 // Sorting the requests in ascending order 
 for (i = 0; i < n-1; i++) { 
 for (j = 0; j < n-i-1; j++) { 
 if (requests[j] > requests[j+1]) { 
 temp = requests[j]; 
 requests[j] = requests[j+1]; 
 requests[j+1] = temp; 
 } 
 } 
 } 
 // Finding the index of the request closest to the head position 
 int index; 
 for (i = 0; i < n; i++) { 
 if (head_pos <= requests[i]) { 
 index = i; 
 break; 
 } 
 } 
 // Traversing right and then left 
 if (dir == 'R') { 
 for (i = index; i < n; i++) { 
 printf("%d ", requests[i]); 
 head_moves += abs(requests[i] - head_pos); 
 head_pos = requests[i]; 
 } 
 for (i = index-1; i >= 0; i--) { 
 printf("%d ", requests[i]); 
 head_moves += abs(requests[i] - head_pos); 
 head_pos = requests[i]; 
 } 
 } 
 // Traversing left and then right 
 else { 
 for (i = index-1; i >= 0; i--) { 
 printf("%d ", requests[i]); 
 head_moves += abs(requests[i] - head_pos); 
 head_pos = requests[i]; 
 } 
 for (i = index; i < n; i++) { 
 printf("%d ", requests[i]); 
 head_moves += abs(requests[i] - head_pos); 
 head_pos = requests[i]; 
 } 
 } 
 // Displaying the total number of head movements 
 printf("\nTotal number of head movements: %d\n", head_moves); 
 return 0; 
} 






 
Ans:-2 
#include <stdio.h> 
#include <stdlib.h> 
#include <mpi.h> 
#define ARRAY_SIZE 1000 
int main(int argc, char **argv) 
{ 
 int rank, size; 
 int array[ARRAY_SIZE], min, local_min; 
 MPI_Init(&argc, &argv); 
 MPI_Comm_rank(MPI_COMM_WORLD, &rank); 
 MPI_Comm_size(MPI_COMM_WORLD, &size); 
 // Generate random numbers 
 srand(rank); 
 for (int i = 0; i < ARRAY_SIZE; i++) { 
 array[i] = rand() % 100; 
 } 
 // Find local minimum 
 local_min = array[0]; 
 for (int i = 1; i < ARRAY_SIZE; i++) { 
 if (array[i] < local_min) { 
 local_min = array[i]; 
 } 
 } 
 // Reduce to find global minimum 
 MPI_Reduce(&local_min, &min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD); 
 // Print results 
 if (rank == 0) { 
 printf("The minimum number is %d.\n", min); 
 } 
 MPI_Finalize(); 
 return 0; 
} 
