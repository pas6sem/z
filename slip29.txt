#include <stdio.h> 
#include <stdlib.h> 
#include <mpi.h> 
#define ARRAY_SIZE 1000 
int main(int argc, char *argv[]) { 
 int rank, size, i; 
 int array[ARRAY_SIZE]; 
 int local_sum = 0, global_sum = 0; 
 MPI_Init(&argc, &argv); 
 MPI_Comm_rank(MPI_COMM_WORLD, &rank); 
 MPI_Comm_size(MPI_COMM_WORLD, &size); 
 if (rank == 0) { 
 // Generate random numbers in array 
 srand(12345); 
 for (i = 0; i < ARRAY_SIZE; i++) { 
 array[i] = rand() % 100; 
 } 
 } 
 // Distribute the array to all processes 
 MPI_Scatter(array, ARRAY_SIZE/size, MPI_INT, array, ARRAY_SIZE/size, MPI_INT, 0, 
MPI_COMM_WORLD); 
 // Calculate local sum 
 for (i = 0; i < ARRAY_SIZE/size; i++) { 
 local_sum += array[i]; 
 } 
 // Calculate global sum using MPI_Reduce 
 MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD); 
 if (rank == 0) { 
 printf("The sum of the %d numbers is %d\n", ARRAY_SIZE, global_sum); 
 } 
 MPI_Finalize(); 
 return 0; 
} 




 
Ans:-Q2 
#include <stdio.h> 
#include <stdlib.h> 
int compare(const void *a, const void *b) { 
 return (*(int*)a - *(int*)b); 
} 
int main() { 
 int n, head, i, j, moves = 0; 
 printf("Enter the total number of disk blocks: "); 
 scanf("%d", &n); 
 int requests[n]; 
 printf("Enter the disk request string:\n"); 
 for (i = 0; i < n; i++) { 
 scanf("%d", &requests[i]); 
 } 
 printf("Enter the starting head position: "); 
 scanf("%d", &head); 
 qsort(requests, n, sizeof(int), compare); 
 int index; 
 for (i = 0; i < n; i++) { 
 if (requests[i] >= head) { 
 index = i; 
 break; 
 } 
 } 
 printf("Enter the direction (0 for left, 1 for right): "); 
 int direction; 
 scanf("%d", &direction); 
 if (direction == 0) { 
 for (i = index - 1; i >= 0; i--) { 
 printf("%d ", requests[i]); 
 moves += abs(head - requests[i]); 
 head = requests[i]; 
 } 
 moves += head; 
 for (i = n - 1; i >= index; i--) { 
 printf("%d ", requests[i]); 
 moves += abs(head - requests[i]); 
 head = requests[i]; 
 } 
 } 
 else if (direction == 1) { 
 for (i = index; i < n; i++) { 
 printf("%d ", requests[i]); 
 moves += abs(head - requests[i]); 
 head = requests[i]; 
 } 
 moves += abs(requests[n - 1] - requests[index - 1]); 
 head = requests[n - 1]; 
 for (i = index - 1; i >= 0; i--) { 
 printf("%d ", requests[i]); 
 moves += abs(head - requests[i]); 
 head = requests[i]; 
 } 
 } 
 printf("\nTotal number of head movements: %d\n", moves); 
 return 0; 
} 
